#!/bin/bash

. /etc/bash_completion.d/git
. ~/dotfiles/colors.bash

___wd_status () {
        local g="$(__gitdir)"
        if [ -n "$g" ]; then
                local r
                local b
                if [ -f "$g/rebase-merge/interactive" ]; then
                        r="|REBASE-i"
                elif [ -d "$g/rebase-merge" ]; then
                        r="|REBASE-m"
                else
                        if [ -d "$g/rebase-apply" ]; then
                                if [ -f "$g/rebase-apply/rebasing" ]; then
                                        r="|REBASE"
                                elif [ -f "$g/rebase-apply/applying" ]; then
                                        r="|AM"
                                else
                                        r="|AM/REBASE"
                                fi
                        elif [ -f "$g/MERGE_HEAD" ]; then
                                r="|MERGING"
                        elif [ -f "$g/BISECT_LOG" ]; then
                                r="|BISECTING"
                        fi
                fi

                local w
                local i
                local s
                local u
                local c

                if [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
                        if [ "true" = "$(git rev-parse --is-bare-repository 2>/dev/null)" ]; then
                                c="BARE:"                        
                        fi
                elif [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
                        if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ]; then
                                if [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
                                        git diff --no-ext-diff --quiet --exit-code || w="*"
                                        if git rev-parse --quiet --verify HEAD >/dev/null; then
                                                git diff-index --cached --quiet HEAD -- || i="+"
                                        else
                                                i="#"
                                        fi
                                fi
                        fi
                        if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ]; then
                                git rev-parse --verify refs/stash >/dev/null 2>&1 && s="$"
                        fi

                        if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ]; then
                           if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                              u="%"
                           fi
                        fi
                fi
                echo "$c$w$i$s$u$r"
        fi
}


while read line; do (
  cd $line;
  project=`basename $line`;
  current=`git symbolic-ref HEAD`;
  branch=`git for-each-ref --format='%(refname:short)' $current`;
  upstream=`git for-each-ref --format='%(upstream:short)' $current`;
  up_status="";
  if [ -n "$upstream" ]; then
    in_a=`git rev-list $branch..$upstream -- | wc -l`;
    in_b=`git rev-list $upstream..$branch -- | wc -l`;
    if [[ $in_a -eq 0 && $in_b -eq 0 ]]; then
      up_status=""; # up to date
    elif [[ $in_a -eq 0 && $in_b -gt 0 ]]; then
      up_status="↑$in_b";
    elif [[ $in_a -gt 0 && $in_b -eq 0 ]]; then
      up_status="↓$in_a";
    else
      up_status="↕";
    fi
  else
    up_status="NO UPSTREAM";
  fi
  wd=$(pwd); 
  wd_status=$(___wd_status);
  status="";
  if [[ "" != ${wd_status} && "" != ${up_status} ]]; then
    status=" ${LIGHT_GREEN}(${wd_status} ${up_status})";
  elif [[ "" != ${wd_status} ]]; then
    status=" ${LIGHT_GREEN}(${wd_status})";
  elif [[ "" != ${up_status} ]]; then
    status=" ${LIGHT_GREEN}(${up_status})";
  fi
  echo -e "${LIGHT_BLUE}${wd/$HOME/~}${NC}:${RED}${branch}${status}${NC}";
) done <$HOME/.mgitrepos
